services:
  # Backend + frontend juntos
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    ports:
      - "${APP_PORT:-3100}:3100"
    environment:
      # App settings
      APP_PORT: ${APP_PORT:-3100}
      TENANT_ID: ${TENANT_ID-cab0b6a7-749f-4ea4-9f94-485acebe57ed}

      # Gemini API
      GEMINI_API_KEY: ${GEMINI_API_KEY}

      # Postgres
      DATABASE_URL: ${DATABASE_URL-postgresql://postgres:postgres@db/postgres}

      # Storage
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID-minio}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY-adminadmin}
      AWS_REGION: ${AWS_REGION-us-east-1}
      AWS_ENDPOINT: ${AWS_ENDPOINT-http://minio:9000}
      AWS_PUBLIC_BUCKET_BASE_URL: ${AWS_PUBLIC_BUCKET_BASE_URL-http://minio:9000}
      AWS_BUCKET: ${AWS_BUCKET-memora}
      AWS_FORCE_PATH_STYLE: ${AWS_FORCE_PATH_STYLE-true}
    depends_on:
      - redis
      - db
      - minio
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Postgres
  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD-postgres}
      POSTGRES_DB: ${POSTGRES_DB-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  # MinIO (S3)
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID-minio}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY-adminadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      - minio-data:/data
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  minio-data:
